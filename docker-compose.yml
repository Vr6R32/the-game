services:


  postgres:
    image: postgres:13
    container_name: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./db-init/db-init.sql:/docker-entrypoint-initdb.d/db-init.sql
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: dontgotosql
      PGDATA: /data/postgres
      TZ: Europe/Warsaw
    networks:
      - postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 1m
      timeout: 10s
      retries: 5
    restart: unless-stopped

  mongo:
    image: mongo
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=user_session
    networks:
      - mongo-network
    volumes:
      - mongo-data:/data/db
      - ./db-init/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    ports:
      - "27017:27017"
  mongo-express:
    image: mongo-express
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo
      - ME_CONFIG_MONGODB_PORT=27017
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
      - ME_CONFIG_MONGODB_AUTH_DATABASE=admin
      - ME_CONFIG_MONGODB_AUTH_USERNAME=${MONGO_ROOT_USER}
      - ME_CONFIG_MONGODB_AUTH_PASSWORD=${MONGO_ROOT_PASSWORD}
      - ME_CONFIG_BASICAUTH_USERNAME=${MONGOEXPRESS_LOGIN}
      - ME_CONFIG_BASICAUTH_PASSWORD=${MONGOEXPRESS_PASSWORD}
    networks:
      - mongo-network
    depends_on:
      - mongo
    ports:
      - "27016:8081"

  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"
    networks:
      - logging
    restart: unless-stopped

  promtail:
    container_name: promtail
    image: grafana/promtail:latest
    volumes:
      - api-logs:/var/log/spring
      - ./logging_infrastructure/promtail-config.yml:/etc/promtail/config.yml
    command: -config.file=/etc/promtail/config.yml
    depends_on:
      - loki
    networks:
      - logging
    restart: unless-stopped
    environment:
      TZ: Europe/Warsaw

  loki:
    container_name: loki
    image: grafana/loki:latest
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - logging
    restart: unless-stopped
    environment:
      TZ: Europe/Warsaw

  grafana:
    container_name: grafana
    image: grafana/grafana:latest
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=secret
    volumes:
      - grafana-data:/var/lib/grafana
      - ./logging_infrastructure/grafana/dashboards:/var/lib/grafana/dashboards
      - ./logging_infrastructure/grafana/datasources-config.yml:/etc/grafana/provisioning/datasources/main.yml
      - ./logging_infrastructure/grafana/dashboard-config.yml:/etc/grafana/provisioning/dashboards/main.yml
    depends_on:
#      - prometheus
      - loki
    ports:
      - "3000:3000"
    networks:
      - logging
    restart: unless-stopped

  prometheus:
    container_name: prometheus
    image: prom/prometheus:v2.48.0
    volumes:
      - ./logging_infrastructure/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./logging_infrastructure/sleep.sh:/etc/prometheus/sleep.sh
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    entrypoint: /etc/prometheus/sleep.sh
    networks:
      - logging
    ports:
      - "9090:9090"
    restart: unless-stopped
    environment:
      TZ: Europe/Warsaw


  api-gateway:
    image: michaelkey/api-gateway:0.0.1-SNAPSHOT
    container_name: api-gateway
    ports:
      - "8083:8083"
    environment:
      SERVER_PORT: 8083
      SPRING_PROFILES_ACTIVE: docker
    volumes:
      - api-logs:/var/log/spring
    networks:
      - logging
      - spring
    depends_on:
      - eureka-server
    restart: unless-stopped


  auth-service:
    image: michaelkey/auth-service:0.0.1-SNAPSHOT
    container_name: auth-service
    ports:
      - "8084:8084"
    environment:
      SERVER_PORT: 8084
      SPRING_PROFILES_ACTIVE: docker
      TZ: Europe/Warsaw
    volumes:
      - api-logs:/var/log/spring
    networks:
      - logging
      - spring
      - postgres
    depends_on:
      - api-gateway
    restart: unless-stopped

  conversation-service:
    image: michaelkey/conversation-service:0.0.1-SNAPSHOT
    container_name: conversation-service
    ports:
      - "8087:8087"
    environment:
      SERVER_PORT: 8087
      SPRING_PROFILES_ACTIVE: docker
      TZ: Europe/Warsaw
    volumes:
      - api-logs:/var/log/spring
    networks:
      - logging
      - spring
      - postgres
    depends_on:
      - api-gateway
    restart: unless-stopped

  eureka-server:
    image: michaelkey/eureka-server:0.0.1-SNAPSHOT
    container_name: eureka-server
    ports:
      - "8761:8761"
    environment:
      SERVER_PORT: 8761
      SPRING_PROFILES_ACTIVE: docker
    volumes:
      - api-logs:/var/log/spring
    networks:
      - logging
      - spring
    restart: unless-stopped

  frontend:
    image: michaelkey/frontend:0.0.1-SNAPSHOT
    container_name: frontend
    ports:
      - "8080:8080"
    environment:
      SERVER_PORT: 8080
      SPRING_PROFILES_ACTIVE: docker
      TZ: Europe/Warsaw
    volumes:
      - api-logs:/var/log/spring
      - ./files/static:/app/files/static
    networks:
      - logging
      - spring
    depends_on:
      - api-gateway
    restart: unless-stopped

  user-service:
    image: michaelkey/user-service:0.0.1-SNAPSHOT
    container_name: user-service
    ports:
      - "8082:8082"
    environment:
      SERVER_PORT: 8082
      SPRING_PROFILES_ACTIVE: docker
      TZ: Europe/Warsaw
    volumes:
      - api-logs:/var/log/spring
    networks:
      - logging
      - spring
      - postgres
    depends_on:
      - api-gateway
    restart: unless-stopped

#  user-service2:
#    image: michaelkey/user-service:0.0.1-SNAPSHOT
#    container_name: user-service
#    ports:
#      - "8090:8090"
#    environment:
#      SERVER_PORT: 8090
#      SPRING_PROFILES_ACTIVE: docker
#      TZ: Europe/Warsaw
#    volumes:
#      - api-logs:/var/log/spring
#    networks:
#      - logging
#      - spring
#      - postgres
#    depends_on:
#      - api-gateway
#    restart: unless-stopped


#  websocket-service:
#    image: michaelkey/websocket-service:0.0.1-SNAPSHOT
#    container_name: websocket-service
#    ports:
#      - "8085:8085"
#    environment:
#      SERVER_PORT: 8085
#      SPRING_PROFILES_ACTIVE: docker
#      TZ: Europe/Warsaw
#    volumes:
#      - api-logs:/var/log/spring
#    networks:
#      - logging
#      - spring
#      - mongo-network
#    depends_on:
#      - api-gateway
#    restart: unless-stopped


volumes:
  mongo-data:
  postgres-data:
  grafana-data:
  api-logs:
    driver: local
    driver_opts:
      type: none
      device: ./logging_infrastructure/api-logs
      o: bind

networks:
  logging:
    driver: bridge
  spring:
    driver: bridge
  postgres:
    driver: bridge
  mongo-network:
    driver: bridge
