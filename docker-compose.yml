services:


  postgres:
    image: postgres:13
    container_name: postgres
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./db-init/db-init.sql:/docker-entrypoint-initdb.d/db-init.sql
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: dontgotosql
      PGDATA: /data/postgres
      TZ: Europe/Warsaw
    networks:
      - postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 1m
      timeout: 10s
      retries: 5
    restart: unless-stopped

  mongo:
    image: mongo
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USER}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=user_session
    volumes:
      - mongo-data:/data/db
      - ./db-init/init-mongo.js:/docker-entrypoint-initdb.d/init-mongo.js:ro
    ports:
      - "27017:27017"
  mongo-express:
    image: mongo-express
    environment:
      - ME_CONFIG_MONGODB_SERVER=mongo
      - ME_CONFIG_MONGODB_PORT=27017
      - ME_CONFIG_MONGODB_ENABLE_ADMIN=true
      - ME_CONFIG_MONGODB_AUTH_DATABASE=admin
      - ME_CONFIG_MONGODB_AUTH_USERNAME=${MONGO_ROOT_USER}
      - ME_CONFIG_MONGODB_AUTH_PASSWORD=${MONGO_ROOT_PASSWORD}
      - ME_CONFIG_BASICAUTH_USERNAME=${MONGOEXPRESS_LOGIN}
      - ME_CONFIG_BASICAUTH_PASSWORD=${MONGOEXPRESS_PASSWORD}
    depends_on:
      - mongo
    ports:
      - "27016:8081"


  api-gateway:
    image: michaelkey/api-gateway:0.0.1-SNAPSHOT
    container_name: api-gateway
    ports:
      - "8083:8083"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring
    depends_on:
      - eureka-server
    restart: unless-stopped


  auth-service:
    image: michaelkey/auth-service:0.0.1-SNAPSHOT
    container_name: auth-service
    ports:
      - "8084:8084"
    environment:
      SERVER_PORT: 8084
      SPRING_PROFILES_ACTIVE: docker
      TZ: Europe/Warsaw
    networks:
      - spring
      - postgres
    depends_on:
      - api-gateway
    restart: unless-stopped

  conversation-service:
    image: michaelkey/conversation-service:0.0.1-SNAPSHOT
    container_name: conversation-service
    ports:
      - "8087:8087"
    environment:
      SERVER_PORT: 8087
      SPRING_PROFILES_ACTIVE: docker
      TZ: Europe/Warsaw
    networks:
      - spring
      - postgres
    depends_on:
      - api-gateway
    restart: unless-stopped

  eureka-server:
    image: michaelkey/eureka-server:0.0.1-SNAPSHOT
    container_name: eureka-server
    ports:
      - "8761:8761"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
    networks:
      - spring
    restart: unless-stopped

  frontend:
    image: michaelkey/frontend:0.0.1-SNAPSHOT
    container_name: frontend
    ports:
      - "8080:8080"
    environment:
      SERVER_PORT: 8080
      SPRING_PROFILES_ACTIVE: docker
      TZ: Europe/Warsaw
    networks:
      - spring
    depends_on:
      - api-gateway
    restart: unless-stopped


  user-service:
    image: michaelkey/user-service:0.0.1-SNAPSHOT
    container_name: user-service
    ports:
      - "8082:8082"
    environment:
      SERVER_PORT: 8082
      SPRING_PROFILES_ACTIVE: docker
      TZ: Europe/Warsaw
    networks:
      - spring
      - postgres
    depends_on:
      - api-gateway
    restart: unless-stopped


  websocket-service:
    image: michaelkey/websocket-service:0.0.1-SNAPSHOT
    container_name: websocket-service
    ports:
      - "8085:8085"
    environment:
      SERVER_PORT: 8085
      SPRING_PROFILES_ACTIVE: docker
      TZ: Europe/Warsaw
    networks:
      - spring
      - postgres
    depends_on:
      - api-gateway
    restart: unless-stopped


volumes:
  mongo-data:
  postgres-data:


networks:
  spring:
    driver: bridge
  postgres:
    driver: bridge
